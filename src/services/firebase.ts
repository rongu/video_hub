import { initializeApp, getApp, type FirebaseApp } from 'firebase/app';
import { 
    getAuth, 
    type Auth, 
    createUserWithEmailAndPassword, 
    signInWithEmailAndPassword, 
    signOut, 
    updateProfile,
    type User
} from 'firebase/auth';
import { 
    getFirestore, 
    Firestore, 
    doc, 
    setDoc,
    collection, 
    query, 
    onSnapshot, 
    addDoc,
    Timestamp, 
    serverTimestamp, 
    writeBatch,
    increment,
    orderBy, 
    QueryDocumentSnapshot, 
    DocumentSnapshot, 
    type DocumentData, 
    FirestoreError,
    // Th√™m deleteDoc ƒë·ªÉ ti·ªán cho c√°c b∆∞·ªõc sau
    deleteDoc,
    // >>> C√ÅC H√ÄM C·∫¶N TH√äM CHO ENROLLMENTS V√Ä QUERY
    where, // Th√™m
    limit, // Th√™m
    getDocs, // Th√™m
} from 'firebase/firestore';

// =================================================================
// 1. C·∫§U H√åNH C·ªê ƒê·ªäNH (LOCAL PC CONFIG)
// =================================================================

/** * üõëüõë B·∫†N PH·∫¢I THAY TH·∫æ C√ÅC GI√Å TR·ªä N√ÄY B·∫∞NG C·∫§U H√åNH FIREBASE C·ª¶A B·∫†N!
 * C·ªê ƒê·ªäNH ID ·ª®NG D·ª§NG ƒê·ªÇ S·ª¨ D·ª§NG TRONG FIREBASE CONSOLE: "video-hub-prod-id"
 */
const firebaseConfig = {
    apiKey: import.meta.env.VITE_FIREBASE_API_KEY || "API_KEY_NOT_SET",
    authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || "",
    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || "",
    storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || "",
    messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || "",
    appId: import.meta.env.VITE_FIREBASE_APP_ID || "",
};

// ƒê·ªäNH NGHƒ®A ID ·ª®NG D·ª§NG M√Ä B·∫†N S·∫º D√ôNG TRONG FIREBASE FIRESTORE PATHS
const APP_ID_ROOT = "video-hub-prod-id"; 

// =================================================================
// 2. GLOBAL & TYPES
// =================================================================

let app: FirebaseApp | null = null;
let db: Firestore | null = null;
let auth: Auth | null = null;

export interface Video {
    id: string;
    title: string;
    url: string;
    duration: number; // T√≠nh b·∫±ng gi√¢y
    order: number;
    adminId: string;
    createdAt: number; // milliseconds
}

export interface Course {
    id: string;
    title: string;
    description: string;
    // T√πy ch·ªçn gi·ªØ l·∫°i ki·ªÉu Date cho m√¥ h√¨nh d·ªØ li·ªáu frontend
    createdAt: Date; 
    updatedAt: Date;
    adminId: string; // [FIX L·ªñI 3]: Thu·ªôc t√≠nh b·∫Øt bu·ªôc
    videoCount: number;
}

// C·∫•u tr√∫c c·ªßa B·∫£n ghi Ghi danh (Enrollment)
export interface Enrollment {
    userId: string;
    courseId: string;
    enrolledAt: Date | string; 
    status: 'active' | 'completed' | 'pending';
}

// =================================================================
// 3. INITIALIZATION
// =================================================================

/**
 * Kh·ªüi t·∫°o Firebase App, Firestore v√† Auth.
 * Khi ch·∫°y Local, ch·ªâ kh·ªüi t·∫°o d·ªãch v·ª•, kh√¥ng t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p.
 */
export async function initializeAndAuthenticate(): Promise<void> {
    try {
        if (!app) {
            try {
                // Th·ª≠ l·∫•y app ƒë√£ c√≥ (tr∆∞·ªùng h·ª£p hot-reload)
                app = getApp();
            } catch (e) {
                // N·∫øu ch∆∞a c√≥, kh·ªüi t·∫°o App m·ªõi
                app = initializeApp(firebaseConfig);
            }
        }

        db = getFirestore(app);
        auth = getAuth(app); 
        
        console.log("Firebase services initialized successfully.");
        
    } catch (error) {
        console.error("L·ªói khi kh·ªüi t·∫°o Firebase:", error);
        if (!auth) {
            console.warn("Auth service failed to initialize properly.");
        }
    }
}

// =================================================================
// 4. GETTERS
// =================================================================

export const getFirestoreDb = (): Firestore => {
    if (!db) {
        throw new Error("Firestore DB ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.");
    }
    return db;
};

export const getFirebaseAuth = (): Auth => {
    if (!auth) {
        throw new Error("Firebase Auth ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. H√£y ƒë·∫£m b·∫£o g·ªçi initializeAndAuthenticate tr∆∞·ªõc.");
    }
    return auth;
};

export const getCurrentAppId = (): string => APP_ID_ROOT;

// =================================================================
// 5. PATHS (ƒê∆∞·ªùng d·∫´n Firestore)
// =================================================================

/** Tr·∫£ v·ªÅ document reference cho profile ng∆∞·ªùi d√πng hi·ªán t·∫°i */
export const getUserDocumentPath = (uid: string) => {
    // ƒê∆∞·ªùng d·∫´n: /artifacts/{APP_ID_ROOT}/users/{userId}/profile/user_data
    const firestore = getFirestoreDb();
    return doc(firestore, `artifacts/${APP_ID_ROOT}/users/${uid}/profile/user_data`);
};

/** Tr·∫£ v·ªÅ collection reference cho c√°c kh√≥a h·ªçc c√¥ng khai */
export const getCoursesCollectionRef = () => {
    // ƒê∆∞·ªùng d·∫´n: /artifacts/{APP_ID_ROOT}/public/data/courses
    const firestore = getFirestoreDb();
    return collection(firestore, `artifacts/${APP_ID_ROOT}/public/data/courses`);
};

/** Tr·∫£ v·ªÅ document reference cho m·ªôt Kh√≥a h·ªçc */
// [FIX L·ªñI 1]: B·ªï sung h√†m ti·ªán √≠ch getCourseDocRef
export const getCourseDocRef = (courseId: string) => {
    // ƒê∆∞·ªùng d·∫´n: /artifacts/{APP_ID_ROOT}/public/data/courses/{courseId}
    const firestore = getFirestoreDb();
    return doc(firestore, `artifacts/${APP_ID_ROOT}/public/data/courses`, courseId);
};

/** Tr·∫£ v·ªÅ collection reference cho Sub-Collection videos c·ªßa m·ªôt Kh√≥a h·ªçc */
export const getVideosCollectionRef = (courseId: string) => {
    // ƒê∆∞·ªùng d·∫´n: /artifacts/{APP_ID_ROOT}/public/data/courses/{courseId}/videos
    const coursesRef = getCoursesCollectionRef();
    return collection(coursesRef, courseId, 'videos');
};

/** Tr·∫£ v·ªÅ collection reference cho c√°c b·∫£n ghi ghi danh (Enrollments) */
export const getEnrollmentsCollectionRef = () => {
    // ƒê∆∞·ªùng d·∫´n: /artifacts/{APP_ID_ROOT}/public/data/enrollments
    const firestore = getFirestoreDb();
    return collection(firestore, `artifacts/${APP_ID_ROOT}/public/data/enrollments`);
};

// =================================================================
// 6. AUTH HANDLERS (ID 1.2, 1.3)
// =================================================================

/** ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi v√† t·∫°o document role m·∫∑c ƒë·ªãnh l√† 'user' */
export async function handleRegister(email: string, password: string, displayName: string): Promise<User> {
    const auth = getFirebaseAuth();
    
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    await updateProfile(user, { displayName });
    
    // Ghi role m·∫∑c ƒë·ªãnh "user" v√†o Firestore
    const userDocRef = getUserDocumentPath(user.uid);
    await setDoc(userDocRef, {
        role: 'user',
        displayName: displayName,
        email: email,
        createdAt: new Date(),
    });

    console.log("ƒêƒÉng k√Ω th√†nh c√¥ng v√† ƒë√£ g√°n role 'user'.");
    return user;
}

/** ƒêƒÉng nh·∫≠p b·∫±ng Email v√† M·∫≠t kh·∫©u */
export async function handleLogin(email: string, password: string): Promise<User> {
    const auth = getFirebaseAuth();
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    return userCredential.user;
}

/** ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng */
export async function handleSignOut(): Promise<void> {
    const auth = getFirebaseAuth();
    await signOut(auth);
    console.log("Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng xu·∫•t.");
}

// =================================================================
// 7. COURSE MANAGEMENT
// =================================================================

/** L·∫Øng nghe t·∫•t c·∫£ c√°c kh√≥a h·ªçc trong real-time. */
export const subscribeToCourses = (callback: (courses: Course[]) => void): () => void => {
    const coursesRef = getCoursesCollectionRef();
    // Th√™m orderBy ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu hi·ªÉn th·ªã c√≥ th·ª© t·ª± (m·ªõi nh·∫•t l√™n tr∆∞·ªõc)
    const q = query(coursesRef, orderBy('createdAt', 'desc')); 

    const unsubscribe = onSnapshot(q, (snapshot) => {
        const courses: Course[] = snapshot.docs.map(doc => {
            const data = doc.data();
            return {
                id: doc.id,
                title: data.title as string,
                description: data.description as string,
                videoCount: data.videoCount as number || 0,
                adminId: data.adminId as string, // [FIX L·ªñI 3]: ƒê·∫£m b·∫£o thu·ªôc t√≠nh adminId ƒë∆∞·ª£c g√°n
                createdAt: (data.createdAt as Timestamp)?.toDate() || new Date(),
                updatedAt: (data.updatedAt as Timestamp)?.toDate() || new Date(),
            } as Course;
        });

        callback(courses);
    }, (error: FirestoreError) => { // [FIX L·ªñI 4]: ƒê·ªãnh ki·ªÉu r√µ r√†ng cho 'error'
        console.error("L·ªói khi l·∫Øng nghe Kh√≥a h·ªçc (subscribeToCourses):", error);
        callback([]);
    });

    return unsubscribe;
};

/** Admin t·∫°o m·ªôt kh√≥a h·ªçc m·ªõi. */
export async function addCourse(title: string, description: string, adminId: string): Promise<void> {
    const coursesRef = getCoursesCollectionRef();
    await addDoc(coursesRef, {
        title,
        description,
        adminId,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
        videoCount: 0,
    });
}

/**
 * L·∫Øng nghe real-time th√¥ng tin chi ti·∫øt c·ªßa m·ªôt kh√≥a h·ªçc.
 */
export const subscribeToCourseDetail = (courseId: string, callback: (course: Course | null) => void): (() => void) => {
    const courseDocRef = getCourseDocRef(courseId); // [FIX L·ªñI 1]: getCourseDocRef ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a

    const unsubscribe = onSnapshot(courseDocRef, (docSnap: DocumentSnapshot<DocumentData>) => { // [FIX L·ªñI 2]: ƒê·ªãnh ki·ªÉu r√µ r√†ng cho 'docSnap'
        if (docSnap.exists()) {
            const data = docSnap.data();
            const course: Course = {
                id: docSnap.id,
                title: data.title as string,
                description: data.description as string,
                videoCount: data.videoCount as number || 0,
                adminId: data.adminId as string, // [FIX L·ªñI 3]: ƒê·∫£m b·∫£o thu·ªôc t√≠nh adminId ƒë∆∞·ª£c g√°n
                createdAt: (data.createdAt as Timestamp)?.toDate() || new Date(),
                updatedAt: (data.updatedAt as Timestamp)?.toDate() || new Date(),
            };
            callback(course);
        } else {
            callback(null); // Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i
        }
    }, (error: FirestoreError) => { // [FIX L·ªñI 4]: ƒê·ªãnh ki·ªÉu r√µ r√†ng cho 'error'
        console.error(`L·ªói khi l·∫Øng nghe Chi ti·∫øt Kh√≥a h·ªçc ID ${courseId}:`, error);
        callback(null);
        throw error;
    });

    return unsubscribe;
};

// =================================================================
// 8. VIDEO MANAGEMENT FUNCTIONS
// =================================================================
/** Admin th√™m m·ªôt video m·ªõi v√†o Sub-Collection c·ªßa m·ªôt Kh√≥a h·ªçc. */
export async function addVideo(courseId: string, videoData: Omit<Video, 'id'>, adminId: string): Promise<void> {
    const db = getFirestoreDb();
    const batch = writeBatch(db); // Kh·ªüi t·∫°o Batch Write

    // 1. L·∫•y References
    const videoRef = doc(getVideosCollectionRef(courseId)); // Doc Ref m·ªõi trong Sub-collection
    const courseRef = getCourseDocRef(courseId); // Doc Ref Kh√≥a h·ªçc cha

    // 2. Chu·∫©n b·ªã d·ªØ li·ªáu Video
    const videoPayload = {
        ...videoData,
        adminId,
        createdAt: serverTimestamp(),
    };

    // 3. Th·ª±c hi·ªán Batched Write
    // a) Th√™m Document Video m·ªõi
    batch.set(videoRef, videoPayload);

    // b) C·∫≠p nh·∫≠t Course cha (TƒÉng s·ªë l∆∞·ª£ng v√† th·ªùi gian c·∫≠p nh·∫≠t)
    batch.update(courseRef, {
        videoCount: increment(1), // TƒÉng videoCount l√™n 1
        updatedAt: serverTimestamp(),
    });

    // 4. Commit (ƒê·∫£m b·∫£o c·∫£ hai thao t√°c th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i c√πng l√∫c)
    await batch.commit();
    console.log(`Video "${videoData.title}" ƒë√£ ƒë∆∞·ª£c th√™m v√†o kh√≥a h·ªçc ${courseId} th√†nh c√¥ng.`);
}

/**
 * L·∫Øng nghe real-time danh s√°ch Video c·ªßa m·ªôt Kh√≥a h·ªçc.
 * @param courseId ID c·ªßa Kh√≥a h·ªçc cha.
 * @param callback H√†m callback ƒë∆∞·ª£c g·ªçi m·ªói khi d·ªØ li·ªáu video thay ƒë·ªïi.
 * @returns H√†m unsubscribe ƒë·ªÉ d·ª´ng l·∫Øng nghe.
 */
export const subscribeToVideos = (courseId: string, callback: (videos: Video[]) => void): () => void => {
    const videosRef = getVideosCollectionRef(courseId);
    
    // FIX L·ªñI INDEX: B·ªè orderBy() ƒë·ªÉ tr√°nh y√™u c·∫ßu Composite Index.
    // Th·ª±c hi·ªán s·∫Øp x·∫øp client-side theo 'order' v√† 'createdAt'.
    const q = query(videosRef);
    
    const unsubscribe = onSnapshot(q, (snapshot) => {
        let videos: Video[] = snapshot.docs.map((doc: QueryDocumentSnapshot) => {
            const data = doc.data();
            const createdAtTimestamp = data.createdAt as Timestamp | undefined;

            return {
                id: doc.id,
                title: data.title as string,
                url: data.url as string,
                duration: data.duration as number,
                order: data.order as number,
                adminId: data.adminId as string,
                // Chuy·ªÉn ƒë·ªïi Timestamp sang milliseconds ƒë·ªÉ ti·ªán s·∫Øp x·∫øp
                createdAt: createdAtTimestamp?.toMillis() || Date.now(), 
            } as Video;
        });

        // FIX S·∫ÆP X·∫æP: Th·ª±c hi·ªán s·∫Øp x·∫øp client-side (tr√™n tr√¨nh duy·ªát)
        videos.sort((a, b) => {
            // S·∫Øp x·∫øp ch√≠nh: Theo th·ª© t·ª± (order) tƒÉng d·∫ßn
            if (a.order !== b.order) {
                return a.order - b.order; 
            }
            // S·∫Øp x·∫øp ph·ª• (khi order b·∫±ng nhau): Theo th·ªùi gian t·∫°o (c≈© h∆°n l√™n tr∆∞·ªõc)
            return (a.createdAt || 0) - (b.createdAt || 0); 
        });

        callback(videos);
    }, (error: FirestoreError) => { // [FIX L·ªñI 4]: ƒê·ªãnh ki·ªÉu r√µ r√†ng cho 'error'
        console.error(`L·ªói l·∫Øng nghe Video cho Course ID ${courseId}:`, error);
    });

    return unsubscribe;
};

/** Admin x√≥a m·ªôt Kh√≥a h·ªçc */
export const deleteCourse = async (courseId: string): Promise<void> => {
    const courseDocRef = getCourseDocRef(courseId);
    await deleteDoc(courseDocRef);
    // TODO: X√≥a t·∫•t c·∫£ Videos thu·ªôc v·ªÅ Kh√≥a h·ªçc n√†y (Level 4.3)
};


// =================================================================
// 9. ENROLLMENTS & ACCESS MANAGEMENT (M·ª•c m·ªõi)
// =================================================================

/**
 * L·∫Øng nghe real-time t·∫•t c·∫£ c√°c b·∫£n ghi ghi danh c·ªßa m·ªôt ng∆∞·ªùi d√πng.
 * H√†m n√†y d√πng trong HomePage ƒë·ªÉ hi·ªÉn th·ªã c√°c kh√≥a h·ªçc m√† User ƒë√£ ghi danh.
 * @param userId UID c·ªßa ng∆∞·ªùi d√πng.
 * @param callback H√†m callback ƒë∆∞·ª£c g·ªçi m·ªói khi danh s√°ch ghi danh thay ƒë·ªïi.
 * @returns H√†m unsubscribe ƒë·ªÉ d·ª´ng l·∫Øng nghe.
 */
export const subscribeToUserEnrollments = (userId: string, callback: (enrollments: Enrollment[]) => void): () => void => {
    const enrollmentsRef = getEnrollmentsCollectionRef();
    // Truy v·∫•n: T√¨m t·∫•t c·∫£ b·∫£n ghi ghi danh c√≥ userId kh·ªõp
    const q = query(enrollmentsRef, where('userId', '==', userId));

    const unsubscribe = onSnapshot(q, (snapshot) => {
        const enrollments: Enrollment[] = snapshot.docs.map(doc => {
            const data = doc.data();
            return {
                userId: data.userId as string,
                courseId: data.courseId as string,
                status: data.status as 'active' | 'completed' | 'pending',
                // Chuy·ªÉn ƒë·ªïi Timestamp sang Date cho giao di·ªán Enrollment
                enrolledAt: (data.enrolledAt as Timestamp)?.toDate() || new Date(), 
            } as Enrollment;
        });
        callback(enrollments);
    }, (error: FirestoreError) => {
        console.error("L·ªói khi l·∫Øng nghe Enrollment c·ªßa User:", error);
        callback([]);
    });

    return unsubscribe;
};

/**
 * Admin: Ghi danh ng∆∞·ªùi d√πng v√†o m·ªôt kh√≥a h·ªçc.
 * @param userId UID c·ªßa ng∆∞·ªùi d√πng c·∫ßn ghi danh.
 * @param courseId ID c·ªßa kh√≥a h·ªçc.
 * @returns Promise<void>
 */
export async function enrollUser(userId: string, courseId: string): Promise<void> {
    const enrollmentsRef = getEnrollmentsCollectionRef();
    await addDoc(enrollmentsRef, {
        userId,
        courseId,
        status: 'active',
        enrolledAt: serverTimestamp(),
    });
    console.log(`User ${userId} enrolled in course ${courseId}.`);
}

/**
 * Admin: H·ªßy ghi danh ng∆∞·ªùi d√πng kh·ªèi m·ªôt kh√≥a h·ªçc.
 * @param userId UID c·ªßa ng∆∞·ªùi d√πng.
 * @param courseId ID c·ªßa kh√≥a h·ªçc.
 * @returns boolean: true n·∫øu h·ªßy th√†nh c√¥ng, false n·∫øu kh√¥ng t√¨m th·∫•y b·∫£n ghi.
 */
export async function unenrollUser(userId: string, courseId: string): Promise<boolean> {
    const enrollmentsRef = getEnrollmentsCollectionRef();
    
    // T√¨m b·∫£n ghi ghi danh c·ª• th·ªÉ
    const q = query(
        enrollmentsRef,
        where("userId", "==", userId),
        where("courseId", "==", courseId),
        limit(1) // Ch·ªâ c·∫ßn t√¨m 1 b·∫£n ghi
    );
    const snapshot = await getDocs(q);

    if (!snapshot.empty) {
        // X√≥a document ƒë·∫ßu ti√™n t√¨m th·∫•y
        const docToDelete = snapshot.docs[0];
        await deleteDoc(doc(enrollmentsRef, docToDelete.id));
        console.log(`User ${userId} unenrolled from course ${courseId} successfully.`);
        return true;
    } else {
        console.warn(`Enrollment record not found for user ${userId} and course ${courseId}.`);
        return false;
    }
}
