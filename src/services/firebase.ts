import { initializeApp, getApp, type FirebaseApp } from 'firebase/app';
import { 
    getAuth, 
    type Auth, 
    createUserWithEmailAndPassword, 
    signInWithEmailAndPassword, 
    signOut, 
    updateProfile,
    type User
} from 'firebase/auth';
import { 
    getFirestore, 
    Firestore, 
    doc, 
    setDoc,
    collection, 
    query, 
    onSnapshot, 
    addDoc,
    Timestamp, 
    serverTimestamp, 
    writeBatch,
    increment,
    orderBy, 
    QueryDocumentSnapshot, 
    DocumentSnapshot, 
    type DocumentData, 
    FirestoreError,
    deleteDoc,
    where, 
    limit, 
    getDocs, 
} from 'firebase/firestore';

// B·ªî SUNG C√ÅC FIREBASE STORAGE IMPORTS CHO QU·∫¢N L√ù VIDEO
import { 
    getStorage, 
    ref, 
    uploadBytes, 
    getDownloadURL, 
    deleteObject,
    uploadBytesResumable, // <<< ƒê√É TH√äM: C·∫ßn cho progress bar upload
} from "firebase/storage";
import { v4 as uuidv4 } from 'uuid'; // Th√™m UUID cho ID video

// =================================================================
// 1. C·∫§U H√åNH C·ªê ƒê·ªäNH (LOCAL PC CONFIG)
// =================================================================

/** * üõëüõë B·∫†N PH·∫¢I THAY TH·∫æ C√ÅC GI√Å TR·ªä N√ÄY B·∫∞NG C·∫§U H√åNH FIREBASE C·ª¶A B·∫†N!
 * C·ªê ƒê·ªäNH ID ·ª®NG D·ª§NG ƒê·ªÇ S·ª¨ D·ª§NG TRONG FIREBASE CONSOLE: "video-hub-prod-id"
 */
const firebaseConfig = {
    apiKey: import.meta.env.VITE_FIREBASE_API_KEY || "API_KEY_NOT_SET",
    authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || "",
    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || "",
    storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || "",
    messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || "",
    appId: import.meta.env.VITE_FIREBASE_APP_ID || "",
};

// ƒê·ªäNH NGHƒ®A ID ·ª®NG D·ª§NG M√Ä B·∫†N S·∫º D√ôNG TRONG FIREBASE FIRESTORE PATHS
const APP_ID_ROOT = "video-hub-prod-id"; 

// =================================================================
// 2. GLOBAL & TYPES (C·∫¨P NH·∫¨T: TH√äM STORAGE)
// =================================================================

let app: FirebaseApp | null = null;
let db: Firestore | null = null;
let auth: Auth | null = null;
export let storage: ReturnType<typeof getStorage> | null = null; // <<< S·ª¨A: Export bi·∫øn storage

/**
 * C·∫¨P NH·∫¨T: Th√™m storagePath v√† b·ªè duration/order/createdAt m·∫∑c ƒë·ªãnh.
 * Th√™m URL v√† Storage Path. B·ªé duration v√† order (s·∫Ω ƒë∆∞·ª£c t√≠nh client-side).
 */
export interface Video {
    id: string;
    courseId: string; // Th√™m ƒë·ªÉ query d·ªÖ h∆°n
    title: string;
    videoUrl: string; // URL t·∫£i v·ªÅ tr·ª±c ti·∫øp t·ª´ Firebase Storage
    storagePath: string; // ƒê∆∞·ªùng d·∫´n trong Storage
    adminId: string;
    // B·ªè c√°c tr∆∞·ªùng order, duration, url c≈© c·ªßa b·∫°n, thay b·∫±ng videoUrl/storagePath
    // B·ªè createdAt/updatedAt kh·ªèi interface v√¨ ch√∫ng ta kh√¥ng mu·ªën g·ª≠i n√≥ l√™n payload
    createdAt: number; // milliseconds
}

export interface Course {
    id: string;
    title: string;
    description: string;
    createdAt: Date; 
    updatedAt: Date;
    adminId: string; 
    videoCount: number;
    // C·∫ßn th√™m imageUrl (T·∫°m th·ªùi kh√¥ng d√πng, nh∆∞ng n√™n c√≥)
    //imageUrl: string; 
}

// C·∫•u tr√∫c c·ªßa B·∫£n ghi Ghi danh (Enrollment)
export interface Enrollment {
    userId: string;
    courseId: string;
    enrolledAt: Date | string; 
    status: 'active' | 'completed' | 'pending';
}

// =================================================================
// 3. INITIALIZATION (C·∫¨P NH·∫¨T: TH√äM STORAGE)
// =================================================================

/**
 * Kh·ªüi t·∫°o Firebase App, Firestore, Auth V√Ä Storage.
 */
export async function initializeAndAuthenticate(): Promise<void> {
    try {
        if (!app) {
            try {
                app = getApp();
            } catch (e) {
                app = initializeApp(firebaseConfig);
            }
        }

        db = getFirestore(app);
        auth = getAuth(app); 
        storage = getStorage(app); // Kh·ªüi t·∫°o Storage
        
        console.log("Firebase services initialized successfully.");
        
    } catch (error) {
        console.error("L·ªói khi kh·ªüi t·∫°o Firebase:", error);
        if (!auth) {
            console.warn("Auth service failed to initialize properly.");
        }
    }
}

// =================================================================
// 4. GETTERS (C·∫¨P NH·∫¨T: TH√äM STORAGE)
// =================================================================

export const getFirestoreDb = (): Firestore => {
    if (!db) {
        throw new Error("Firestore DB ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.");
    }
    return db;
};

export const getFirebaseAuth = (): Auth => {
    if (!auth) {
        throw new Error("Firebase Auth ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. H√£y ƒë·∫£m b·∫£o g·ªçi initializeAndAuthenticate tr∆∞·ªõc.");
    }
    return auth;
};

export const getFirebaseStorage = (): ReturnType<typeof getStorage> => {
    if (!storage) {
        throw new Error("Firebase Storage ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. H√£y ƒë·∫£m b·∫£o g·ªçi initializeAndAuthenticate tr∆∞·ªõc.");
    }
    return storage;
};

export const getCurrentAppId = (): string => APP_ID_ROOT;

// =================================================================
// 5. PATHS (ƒê∆∞·ªùng d·∫´n Firestore)
// =================================================================
// (GI·ªÆ NGUY√äN C√ÅC H√ÄM PATHS C·ª¶A B·∫†N)
/** Tr·∫£ v·ªÅ document reference cho profile ng∆∞·ªùi d√πng hi·ªán t·∫°i */
export const getUserDocumentPath = (uid: string) => {
    const firestore = getFirestoreDb();
    return doc(firestore, `artifacts/${APP_ID_ROOT}/users/${uid}/profile/user_data`);
};

/** Tr·∫£ v·ªÅ collection reference cho c√°c kh√≥a h·ªçc c√¥ng khai */
export const getCoursesCollectionRef = () => {
    const firestore = getFirestoreDb();
    return collection(firestore, `artifacts/${APP_ID_ROOT}/public/data/courses`);
};

/** Tr·∫£ v·ªÅ document reference cho m·ªôt Kh√≥a h·ªçc */
export const getCourseDocRef = (courseId: string) => {
    const firestore = getFirestoreDb();
    return doc(firestore, `artifacts/${APP_ID_ROOT}/public/data/courses`, courseId);
};

/** Tr·∫£ v·ªÅ collection reference cho Sub-Collection videos c·ªßa m·ªôt Kh√≥a h·ªçc */
export const getVideosCollectionRef = (courseId: string) => {
    const coursesRef = getCoursesCollectionRef();
    return collection(coursesRef, courseId, 'videos');
};

/** Tr·∫£ v·ªÅ collection reference cho c√°c b·∫£n ghi ghi danh (Enrollments) */
export const getEnrollmentsCollectionRef = () => {
    const firestore = getFirestoreDb();
    return collection(firestore, `artifacts/${APP_ID_ROOT}/public/data/enrollments`);
};

// =================================================================
// 6. AUTH HANDLERS
// =================================================================
// (GI·ªÆ NGUY√äN C√ÅC H√ÄM AUTH C·ª¶A B·∫†N)

/** ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi v√† t·∫°o document role m·∫∑c ƒë·ªãnh l√† 'user' */
export async function handleRegister(email: string, password: string, displayName: string): Promise<User> {
    const auth = getFirebaseAuth();
    
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    await updateProfile(user, { displayName });
    
    // Ghi role m·∫∑c ƒë·ªãnh "user" v√†o Firestore
    const userDocRef = getUserDocumentPath(user.uid);
    await setDoc(userDocRef, {
        role: 'user',
        displayName: displayName,
        email: email,
        createdAt: new Date(),
    });

    console.log("ƒêƒÉng k√Ω th√†nh c√¥ng v√† ƒë√£ g√°n role 'user'.");
    return user;
}

/** ƒêƒÉng nh·∫≠p b·∫±ng Email v√† M·∫≠t kh·∫©u */
export async function handleLogin(email: string, password: string): Promise<User> {
    const auth = getFirebaseAuth();
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    return userCredential.user;
}

/** ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng */
export async function handleSignOut(): Promise<void> {
    const auth = getFirebaseAuth();
    await signOut(auth);
    console.log("Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng xu·∫•t.");
}

// =================================================================
// 7. COURSE MANAGEMENT
// =================================================================
// (GI·ªÆ NGUY√äN C√ÅC H√ÄM COURSE C·ª¶A B·∫†N)

/** L·∫Øng nghe t·∫•t c·∫£ c√°c kh√≥a h·ªçc trong real-time. */
export const subscribeToCourses = (callback: (courses: Course[]) => void): () => void => {
    const coursesRef = getCoursesCollectionRef();
    const q = query(coursesRef, orderBy('createdAt', 'desc')); 

    const unsubscribe = onSnapshot(q, (snapshot) => {
        const courses: Course[] = snapshot.docs.map(doc => {
            const data = doc.data();
            return {
                id: doc.id,
                title: data.title as string,
                description: data.description as string,
                videoCount: data.videoCount as number || 0,
                adminId: data.adminId as string,
                imageUrl: data.imageUrl as string || 'https://placehold.co/600x400/818CF8/FFFFFF?text=Course+Image', // Th√™m imageUrl (default)
                createdAt: (data.createdAt as Timestamp)?.toDate() || new Date(),
                updatedAt: (data.updatedAt as Timestamp)?.toDate() || new Date(),
            } as Course;
        });

        callback(courses);
    }, (error: FirestoreError) => {
        console.error("L·ªói khi l·∫Øng nghe Kh√≥a h·ªçc (subscribeToCourses):", error);
        callback([]);
    });

    return unsubscribe;
};

/** Admin t·∫°o m·ªôt kh√≥a h·ªçc m·ªõi. */
export async function addCourse(title: string, description: string, adminId: string, imageUrl: string = ''): Promise<void> {
    const coursesRef = getCoursesCollectionRef();
    await addDoc(coursesRef, {
        title,
        description,
        adminId,
        imageUrl: imageUrl || 'https://placehold.co/600x400/818CF8/FFFFFF?text=Course+Image', // Th√™m imageUrl
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
        videoCount: 0,
    });
}

/**
 * L·∫Øng nghe real-time th√¥ng tin chi ti·∫øt c·ªßa m·ªôt kh√≥a h·ªçc.
 */
export const subscribeToCourseDetail = (courseId: string, callback: (course: Course | null) => void): (() => void) => {
    const courseDocRef = getCourseDocRef(courseId);

    const unsubscribe = onSnapshot(courseDocRef, (docSnap: DocumentSnapshot<DocumentData>) => {
        if (docSnap.exists()) {
            const data = docSnap.data();
            const course: Course = {
                id: docSnap.id,
                title: data.title as string,
                description: data.description as string,
                videoCount: data.videoCount as number || 0,
                adminId: data.adminId as string,
                //imageUrl: data.imageUrl as string || 'https://placehold.co/600x400/818CF8/FFFFFF?text=Course+Image', // Th√™m imageUrl (default)
                createdAt: (data.createdAt as Timestamp)?.toDate() || new Date(),
                updatedAt: (data.updatedAt as Timestamp)?.toDate() || new Date(),
            };
            callback(course);
        } else {
            callback(null); // Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i
        }
    }, (error: FirestoreError) => {
        console.error(`L·ªói khi l·∫Øng nghe Chi ti·∫øt Kh√≥a h·ªçc ID ${courseId}:`, error);
        callback(null);
        throw error;
    });

    return unsubscribe;
};

/** Admin x√≥a m·ªôt Kh√≥a h·ªçc */
export const deleteCourse = async (courseId: string): Promise<void> => {
    const courseDocRef = getCourseDocRef(courseId);
    await deleteDoc(courseDocRef);
    // TODO: X√≥a t·∫•t c·∫£ Videos thu·ªôc v·ªÅ Kh√≥a h·ªçc n√†y (Level 4.3)
};


// =================================================================
// 8. VIDEO MANAGEMENT FUNCTIONS (C·∫¨P NH·∫¨T V√Ä B·ªî SUNG CH·ª®C NƒÇNG STORAGE)
// =================================================================

/**
 * T·∫°o m·ªôt UUID duy nh·∫•t cho ID video.
 */
export const generateVideoId = () => uuidv4();

/**
 * T·∫£i file video l√™n Firebase Storage.
 * H√†m n√†y hi·ªán t·∫°i d√πng uploadBytes. Trong CreateVideoForm ch√∫ng ta d√πng uploadBytesResumable
 * n√™n h√†m n√†y c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt n·ªØa n·∫øu ta x·ª≠ l√Ω upload trong component.
 */
export const uploadVideoFile = async (
    file: File, 
    courseId: string, 
    videoId: string
): Promise<{videoUrl: string, storagePath: string}> => {
    
    const storage = getFirebaseStorage();
    // Path: videos/{courseId}/{videoId}/unique_filename
    const path = `artifacts/${APP_ID_ROOT}/videos/${courseId}/${videoId}/${file.name}`; 
    const videoRef = ref(storage, path);
    
    try {
        await uploadBytes(videoRef, file);
        const downloadURL = await getDownloadURL(videoRef);
        return {
            videoUrl: downloadURL,
            storagePath: path,
        };
    } catch (e) {
        console.error("L·ªói khi t·∫£i file video l√™n Storage:", e);
        throw new Error("Kh√¥ng th·ªÉ t·∫£i file video l√™n. (L·ªói: Thi·∫øu quy·ªÅn ho·∫∑c L·ªói k·∫øt n·ªëi)");
    }
};

/** * Admin th√™m m·ªôt video m·ªõi v√†o Sub-Collection c·ªßa m·ªôt Kh√≥a h·ªçc. 
 * H√ÄM N√ÄY ƒê√É ƒê∆Ø·ª¢C THAY TH·∫æ HO√ÄN TO√ÄN B·∫∞NG createVideo
 * T√îI T·∫†O H√ÄM M·ªöI ƒê·ªÇ PH√ô H·ª¢P V·ªöI C√ÅCH L√ÄM MULTI-UPLOAD
 */
export async function createVideo(
    courseId: string,
    title: string,
    videoUrl: string,
    storagePath: string,
    adminId: string,
    videoId: string, 
): Promise<string> {
    
    const db = getFirestoreDb();
    const batch = writeBatch(db); 
    
    // 1. L·∫•y References
    const videosCollectionRef = getVideosCollectionRef(courseId);
    const newVideoDocRef = doc(videosCollectionRef, videoId); // S·ª≠ d·ª•ng videoId l√†m Document ID
    const courseDocRef = getCourseDocRef(courseId);
    
    try {
        // 2. T·∫°o document Video (KH√îNG C√ì description/duration/order)
        batch.set(newVideoDocRef, {
            courseId,
            title,
            videoUrl,
            storagePath,
            adminId,
            createdAt: serverTimestamp(),
            // Th√™m c√°c tr∆∞·ªùng c·∫ßn thi·∫øt kh√°c (n·∫øu c√≥)
        });
        
        // 3. C·∫≠p nh·∫≠t videoCount c·ªßa Kh√≥a h·ªçc
        batch.update(courseDocRef, {
            videoCount: increment(1), // TƒÉng videoCount l√™n 1
            updatedAt: serverTimestamp(),
        });

        // 4. Commit
        await batch.commit();
        
        return videoId;
        
    } catch (e) {
        console.error("L·ªói khi t·∫°o video ho·∫∑c c·∫≠p nh·∫≠t Kh√≥a h·ªçc:", e);
        throw new Error("Kh√¥ng th·ªÉ l∆∞u th√¥ng tin video. Vui l√≤ng th·ª≠ l·∫°i.");
    }
}

/**
 * X√≥a video kh·ªèi Firestore v√† Storage.
 */
export const deleteVideo = async (courseId: string, video: Video): Promise<void> => {
    const db = getFirestoreDb();
    const storage = getFirebaseStorage();
    const batch = writeBatch(db);

    // 1. L·∫•y References
    const videoDocRef = doc(getVideosCollectionRef(courseId), video.id);
    const courseDocRef = getCourseDocRef(courseId);
    const videoStorageRef = ref(storage, video.storagePath);

    try {
        // 2. X√≥a file kh·ªèi Storage
        await deleteObject(videoStorageRef);

        // 3. Th·ª±c hi·ªán Batched Write
        // a) X√≥a Document Video
        batch.delete(videoDocRef);

        // b) C·∫≠p nh·∫≠t Course cha (Gi·∫£m s·ªë l∆∞·ª£ng)
        batch.update(courseDocRef, {
            videoCount: increment(-1), // Gi·∫£m videoCount ƒëi 1
            updatedAt: serverTimestamp(),
        });

        // 4. Commit
        await batch.commit();

        console.log(`Video "${video.title}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.`);
    } catch (e) {
        console.error("L·ªói khi x√≥a video ho·∫∑c c·∫≠p nh·∫≠t Kh√≥a h·ªçc:", e);
        // N√©m l·ªói l√™n ƒë·ªÉ UI x·ª≠ l√Ω
        throw new Error("Kh√¥ng th·ªÉ x√≥a video. Vui l√≤ng ki·ªÉm tra quy·ªÅn v√† th·ª≠ l·∫°i.");
    }
};


/**
 * L·∫Øng nghe real-time danh s√°ch Video c·ªßa m·ªôt Kh√≥a h·ªçc.
 * @param courseId ID c·ªßa Kh√≥a h·ªçc cha.
 * @param callback H√†m callback ƒë∆∞·ª£c g·ªçi m·ªói khi d·ªØ li·ªáu video thay ƒë·ªïi.
 * @returns H√†m unsubscribe ƒë·ªÉ d·ª´ng l·∫Øng nghe.
 */
export const subscribeToVideos = (courseId: string, callback: (videos: Video[]) => void): () => void => {
    const videosRef = getVideosCollectionRef(courseId);
    
    // S·∫Øp x·∫øp client-side (tr√™n tr√¨nh duy·ªát) theo createdAt (c≈© nh·∫•t l√™n tr∆∞·ªõc)
    const q = query(videosRef);
    
    const unsubscribe = onSnapshot(q, (snapshot) => {
        let videos: Video[] = snapshot.docs.map((doc: QueryDocumentSnapshot) => {
            const data = doc.data();
            const createdAtTimestamp = data.createdAt as Timestamp | undefined;

            return {
                id: doc.id,
                courseId: data.courseId as string, // Th√™m courseId
                title: data.title as string,
                videoUrl: data.videoUrl as string,
                storagePath: data.storagePath as string, // Th√™m storagePath
                adminId: data.adminId as string,
                createdAt: createdAtTimestamp?.toMillis() || Date.now(), 
            } as Video;
        });

        // S·∫Øp x·∫øp client-side theo th·ªùi gian t·∫°o (c≈© nh·∫•t l√™n tr∆∞·ªõc, nghƒ©a l√† b√†i h·ªçc ƒë·∫ßu ti√™n)
        videos.sort((a, b) => (a.createdAt || 0) - (b.createdAt || 0)); 

        callback(videos);
    }, (error: FirestoreError) => {
        console.error(`L·ªói l·∫Øng nghe Video cho Course ID ${courseId}:`, error);
    });

    return unsubscribe;
};

// =================================================================
// 9. ENROLLMENTS & ACCESS MANAGEMENT
// =================================================================
// (GI·ªÆ NGUY√äN C√ÅC H√ÄM ENROLLMENT C·ª¶A B·∫†N)

/**
 * L·∫Øng nghe real-time t·∫•t c·∫£ c√°c b·∫£n ghi ghi danh c·ªßa m·ªôt ng∆∞·ªùi d√πng.
 */
export const subscribeToUserEnrollments = (userId: string, callback: (enrollments: Enrollment[]) => void): () => void => {
    const enrollmentsRef = getEnrollmentsCollectionRef();
    const q = query(enrollmentsRef, where('userId', '==', userId));

    const unsubscribe = onSnapshot(q, (snapshot) => {
        const enrollments: Enrollment[] = snapshot.docs.map(doc => {
            const data = doc.data();
            return {
                userId: data.userId as string,
                courseId: data.courseId as string,
                status: data.status as 'active' | 'completed' | 'pending',
                enrolledAt: (data.enrolledAt as Timestamp)?.toDate() || new Date(), 
            } as Enrollment;
        });
        callback(enrollments);
    }, (error: FirestoreError) => {
        console.error("L·ªói khi l·∫Øng nghe Enrollment c·ªßa User:", error);
        callback([]);
    });

    return unsubscribe;
};

/**
 * Admin: Ghi danh ng∆∞·ªùi d√πng v√†o m·ªôt kh√≥a h·ªçc.
 */
export async function enrollUser(userId: string, courseId: string): Promise<void> {
    const enrollmentsRef = getEnrollmentsCollectionRef();
    await addDoc(enrollmentsRef, {
        userId,
        courseId,
        status: 'active',
        enrolledAt: serverTimestamp(),
    });
    console.log(`User ${userId} enrolled in course ${courseId}.`);
}

/**
 * Admin: H·ªßy ghi danh ng∆∞·ªùi d√πng kh·ªèi m·ªôt kh√≥a h·ªçc.
 */
export async function unenrollUser(userId: string, courseId: string): Promise<boolean> {
    const enrollmentsRef = getEnrollmentsCollectionRef();
    
    const q = query(
        enrollmentsRef,
        where("userId", "==", userId),
        where("courseId", "==", courseId),
        limit(1) 
    );
    const snapshot = await getDocs(q);

    if (!snapshot.empty) {
        const docToDelete = snapshot.docs[0];
        await deleteDoc(doc(enrollmentsRef, docToDelete.id));
        console.log(`User ${userId} unenrolled from course ${courseId} successfully.`);
        return true;
    } else {
        console.warn(`Enrollment record not found for user ${userId} and course ${courseId}.`);
        return false;
    }
}

// =================================================================
// EXPORTS C·∫¶N THI·∫æT CHO C√ÅC COMPONENT S·ª¨ D·ª§NG STORAGE
// =================================================================

export { 
    ref, 
    uploadBytesResumable, // <<< EXPORTED
    getDownloadURL, // <<< EXPORTED
    createVideo as addVideo, // <<< ALIAS: Export createVideo th√†nh addVideo ƒë·ªÉ CreateVideoForm.tsx d√πng
};
